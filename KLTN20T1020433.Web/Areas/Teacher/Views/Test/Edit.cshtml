@using KLTN20T1020433.Application.Services
@using KLTN20T1020433.Web.AppCodes
@model KLTN20T1020433.Application.DTOs.TeacherDTOs.GetTestByIdResponse
@{
    Layout = "~/Areas/Teacher/Views/Shared/_Layout.cshtml";
    string action = ViewBag.IsEdit ? Url.Action("EditStudents", "Test", new { id = Model.TestId }) : Url.Action("SelectStudents", "Test", new { type = Model.TestType });
}
<div class="container-fluid px-0">
    <form action="@action" method="post">
        <div class="card">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center me-9 flex-wrap">
                    <h2 class="fw-semibold align-items-center">@ViewBag.Title</h2>
                    <input type="hidden" name="TestId" value="@Model.TestId" />
                    <input type="hidden" name="Semester" value="@Model.Semester" />
                    <input type="hidden" name="ModuleId" value="@Model.ModuleId" />
                    <div class="d-flex justify-content-end">
                        @if (ViewBag.IsEdit)
                        {
                            <button id="deleteBtn" type="button" class="btn btn-outline-danger me-2" style="width: 100px;"><span class="fw-semibold">Xóa</span></button>
                        }
                        else
                        {
                            <button id="cancelBtn" type="button" class="btn btn-outline-danger me-2" style="width: 100px;"><span class="fw-semibold">Hủy</span></button>
                        }
                        <button type="submit" class="btn btn-outline-primary" style="width: 154px;"><i class="bi bi-person-plus"></i><span class="fw-semibold ms-2">Chọn sinh viên</span></button>
                    </div>
                </div>
                <div class="row">
                    <!-- Cột trái -->
                    <div class="col-lg-8 mt-4">
                        <div class="col-lg mb-4 card">
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="title" class="form-label">Tiêu đề:</label>
                                    <input type="text" class="form-control" id="title" required name="Title" value="@Model.Title">
                                </div>
                                <div class="mb-3">
                                    <label for="instruction" class="form-label">Hướng dẫn (không bắt buộc):</label>
                                    <textarea id="instructionInput">@Model.Instruction</textarea>
                                    <input type="hidden" id="instruction" name="instruction" value="@Model.Instruction" />
                                </div>
                                <div class="mb-3 form-check">
                                    <input type="checkbox" class="form-check-input" id="isCheckIP" name="IsCheckIP" value="true" @(Model.IsCheckIP ? "checked" : "")>
                                    <label class="form-check-label" for="isCheckIP">Kiểm tra IP</label>
                                </div>
                                <div class="mb-3 form-check">
                                    <input type="checkbox" class="form-check-input" id="isConductedAtSchool" name="IsConductedAtSchool" value="true" @(Model.IsConductedAtSchool ? "checked" : "")>
                                    <label class="form-check-label" for="isConductedAtSchool">Thi trên máy trường</label>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg mb-4 card">
                            <div class="card-body">
                                <b class="mb-3">Đính kèm</b>
                                <div id="test_files">
                                </div>
                                <form method="post" enctype="multipart/form-data" action="UploadTestFile">
                                    <input type="file" class="d-none" multiple id="fileInput" />
                                    <div class="mb-3 d-flex justify-content-center">
                                        <button id="selectFileBtn" type="button" class="btn btn-primary">Tải lên</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>

                    <!-- Cột phải -->
                    <div class="col-lg-4 mt-4 me-0">
                        <div class="col-lg card">
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="start-time" class="form-label">Thời gian bắt đầu:</label>
                                    <input type="datetime-local" class="form-control" id="start-time" name="StartTime" value="@(Model.StartTime == null ? "" : Model.StartTime.Value.ToString(Converter.DateTimeLocal))">
                                </div>
                                <div class="mb-3">
                                    <label for="deadline" class="form-label">Hạn nộp:</label>
                                    <input type="datetime-local" class="form-control" id="deadline" name="EndTime" value="@(Model.EndTime == null ? "" : Model.EndTime.Value.ToString(Converter.DateTimeLocal))">
                                </div>

                                <div class="mb-3 form-check">
                                    <input type="checkbox" class="form-check-input" id="exampleCheck1" name="CanSubmitLate" value="true" @(Model.CanSubmitLate ? "checked" : "")>
                                    <label class="form-check-label" for="exampleCheck1">Đóng tính năng nộp bài sau ngày đến hạn</label>
                                </div>
                            </div>
                        </div>
                        @if (@Model.TestType == KLTN20T1020433.Domain.Test.TestType.Exam)
                        {
                            <div class="col-lg card">
                                <div class="card-body">
                                    <span class="fw-semibold btn btn-outline-info me-2 mb-2" id="selectSemester" data-bs-toggle="modal" data-bs-target="#selectSemesterModal">Chọn học kỳ, năm học</span>
                                    <div id="examSchedule">

                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>
<div class="modal fade" id="selectSemesterModal" tabindex="-1" aria-labelledby="selectSemesterModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="selectSemesterLabel">Chọn học kỳ và năm học</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-2">
                    <div class="col-md-6">
                        <label for="Semester">Học kỳ:</label>
                        <select class="form-select" id="Semester" name="Semester">

                            <option value="1">Học kỳ 1</option>
                            <option value="2">Học kỳ 2</option>
                            <option value="3">Học kỳ 3</option>

                            }
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label for="SchoolYear">Năm học:</label>
                        <select class="form-select" id="SchoolYear" name="SchoolYear">
                            <option value="">Chọn năm học</option>
                        </select>
                    </div>
                </div>
                <select class="form-select" id="Module" name="moduleId">
                    <option selected value="">Chọn học phần</option>
                </select>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                <button type="button" class="btn btn-primary" onclick="saveSemester()">Lưu</button>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        ClassicEditor
            .create(document.querySelector('#instructionInput'), {
                toolbar: ['undo', 'redo', '|', 'bold', 'italic', 'underline', '|', 'alignment:left', 'alignment:right', 'alignment:center', 'alignment:justify', '|', 'bulletedList', 'numberedList']

            })
            .then(editor => {
                console.log('Editor was initialized', editor);
                //editor.setData(@Model.Instruction);
                editor.model.document.on('change:data', () => {
                    document.querySelector('#instruction').value = editor.getData();
                });
            })
            .catch(error => {
                console.error('There was an error initializing the editor', error);
            });
        function initialize() {
            var testId = @Model.TestId;
            getFiles(testId);
            getSchoolYears();
            bindEvents(testId);
        }
        $(document).ready(function () {
            initialize();
        });
        function bindEvents(testId) {
            $('#selectFileBtn').off('click').on('click', function () {
                $('#fileInput').click();
            });
            $('#fileInput').off('change').on('change', function () {
                var check = checkFileSize(this);
                if (check)
                    uploadFiles(testId);
            });
            $('#cancelBtn').on('click', function () {
                cancelCreation(testId);
            });
            // Bắt sự kiện khi click vào nút xóa file
            $(document).on('click', '.remove-button', function () {
                var fileId = $(this).data('fileid');
                removeFile(fileId, testId);
            });
            $('#Semester').on('change', function () {
                console.log('a');
                selectSemester();
            });
            $('#SchoolYear').on('change', function () {
                console.log('a');
                selectSemester();
            });
            $('.class-btn').click(function () {
                $('.class-btn').removeClass('selected');
                $(this).addClass('selected');
            });
            $('#deleteBtn').click(function () {
                openModalWithConfirmation('Xóa kỳ thi', 'Bạn có chắc chắn muốn xóa kỳ thi?', 'Xác nhận', function () {
                    deleteTest(testId);
                });
            });

        }
        function selectSemester() {
            var semester = $('#Semester').val();
            var schoolYear = $('#SchoolYear').val();
            getModules(schoolYear + '.' + semester);
        }
        function saveSemester() {
            var semester = $('#Semester').val();
            var schoolYear = $('#SchoolYear').val();
            var moduleId = $('#Module').val();
            $('#selectSemester').text('Học kỳ: ' + semester + ', Năm học: ' + schoolYear);
            $('#selectSemesterModal').modal('hide');
            getExamSchedules(schoolYear + '.' + semester, moduleId);
        }
        function getModules(semester) {
            var url = '@Url.Action("GetModules", "Test")';
            $.ajax({
                url: url,
                type: 'GET',
                data: { semester: semester },
                success: function (response) {
                    // Assuming response is a list of courses
                    var modules = response;
                    var moduleSelect = $('#Module');
                    moduleSelect.empty();
                    moduleSelect.append('<option selected value="">Chọn học phần</option>');
                    $.each(modules, function (index, module) {
                        moduleSelect.append('<option value="' + module.moduleId + '">' + module.moduleName + '</option>');
                    });
                },
                error: function (error) {
                    console.log(error);
                }
            });
        }
        function uploadFiles(testId) {
            var formData = new FormData();
            var files = $('#fileInput')[0].files;
            $.each(files, function (index, file) {
                formData.append('files', file);
            });
            formData.append('testId', testId);
            var url = '@Url.Action("UploadTestFile", "Test")';
            $.ajax({
                url: url,
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    if (response.success) {
                        $('#fileInput').val('');
                        testId = response.testId;
                        initialize(testId)
                        getFiles(testId);
                    }
                    else {
                        showToast(response.message);
                    }
                },
                error: function (xhr, status, error) {
                    handleAjaxError(xhr);
                }
            });
        }
        function getFiles(testId) {
            var url = '@Url.Action("ListTestFiles", "Test")';
            $.ajax({
                url: url,
                type: "GET",
                data: { testId: testId },
                success: function (data) {
                    $("#test_files").html(data);
                },
                error: function (xhr, status, error) {
                    handleAjaxError(xhr);
                }
            });
        }
        function removeFile(fileId, testId) {
            var url = '@Url.Action("RemoveTestFile", "Test")';
            $.ajax({
                url: url,
                type: 'POST',
                data: { id: fileId, testId: testId },
                success: function (response) {
                    showToast(response);
                    getFiles(testId);
                },
                error: function (xhr, status, error) {
                    handleAjaxError(xhr);
                }
            });
        }
        function deleteTest(testId) {
            var url = '@Url.Action("Delete", "Test")';
            $.ajax({
                url: url,
                type: 'POST',
                data: { id: testId },
                success: function (response) {
                    showToast(response);
                    window.location.href = '@Url.Action("Index", "Test")';
                },
                error: function (xhr, status, error) {
                    handleAjaxError(xhr);
                }
            });
        }
        function cancelCreation(testId) {
            var url = '@Url.Action("CancelCreation", "Test")';
            $.ajax({
                url: url,
                type: 'POST',
                data: { testId: testId },
                success: function (result) {
                    window.location.href = '@Url.Action("Index", "Test")';
                },
                error: function (error) {
                    alert("Your request is not valid!");
                }
            });
        }
        function getExamSchedules(semester, moduleId) {
            var url = '@Url.Action("GetExamSchedules", "Test")';
            $.ajax({
                url: url,
                type: 'GET',
                data: { semester: semester, moduleId: moduleId },
                success: function (response) {
                    $("#examSchedule").html(response);
                },
                error: function (error) {
                    console.log(error);
                }
            });
        }
        function getSchoolYears() {
            var url = '@Url.Action("GetSchoolYears", "Test")';
            $.ajax({
                url: url,
                type: 'GET',
                success: function (response) {
                    var select = $('#SchoolYear');
                    select.empty(); // Clear existing options
                    select.append('<option value="">Chọn năm học</option>'); // Default option

                    // Assuming response is an array of school years
                    response.forEach(function (schoolYear) {
                        var option = `<option value="${schoolYear.namHoc}">${schoolYear.namHoc}</option>`;
                        select.append(option);
                    });
                },
                error: function (error) {
                    console.log(error);
                }
            });
        }
    </script>

}